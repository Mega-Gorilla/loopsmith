// „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éâ„Ç≠„É•„É°„É≥„ÉàË©ï‰æ°„Çπ„ÇØ„É™„Éó„Éà
const WebSocket = require('ws');
const fs = require('fs');
const path = require('path');

const MCP_URL = 'ws://localhost:23110/mcp';
const DOC_PATH = path.join(__dirname, '../../docs/architecture.md');

async function evaluateArchitectureDoc() {
  console.log('üìö „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆË©ï‰æ°„ÇíÈñãÂßã...');
  console.log(`üìÑ Ë©ï‰æ°ÂØæË±°: ${DOC_PATH}`);
  
  // „Éâ„Ç≠„É•„É°„É≥„Éà„ÇíË™≠„ÅøËæº„Åø
  const docContent = fs.readFileSync(DOC_PATH, 'utf-8');
  console.log(`üìù „Éâ„Ç≠„É•„É°„É≥„Éà„Çµ„Ç§„Ç∫: ${docContent.length}ÊñáÂ≠ó`);
  
  console.log(`\nüì° MCP„Çµ„Éº„Éê„Éº„Å´Êé•Á∂ö‰∏≠: ${MCP_URL}`);
  const ws = new WebSocket(MCP_URL);
  
  return new Promise((resolve, reject) => {
    let messageId = 1;
    const startTime = Date.now();
    
    ws.on('open', () => {
      console.log('‚úÖ WebSocketÊé•Á∂öÊàêÂäü');
      
      // Initialize
      const initMessage = {
        jsonrpc: '2.0',
        method: 'initialize',
        id: messageId++,
        params: {
          protocolVersion: '2024-11-05',
          capabilities: {}
        }
      };
      
      console.log('üì§ ÂàùÊúüÂåñ„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°');
      ws.send(JSON.stringify(initMessage));
    });
    
    ws.on('message', (data) => {
      const message = JSON.parse(data.toString());
      
      // ÂàùÊúüÂåñÂÆå‰∫ÜÂæå„ÄÅË©ï‰æ°„ÇíÂÆüË°å
      if (message.result && message.result.serverInfo) {
        console.log('‚úÖ ÂàùÊúüÂåñÂÆå‰∫Ü');
        console.log('\nüîç „Éâ„Ç≠„É•„É°„É≥„ÉàË©ï‰æ°„ÇíÈñãÂßã...');
        console.log('‚è≥ Codex„Å´„Çà„ÇãË©ï‰æ°„ÇíÂÆüË°å‰∏≠ÔºàÊúÄÂ§ß10ÂàÜÔºâ...\n');
        
        const evalMessage = {
          jsonrpc: '2.0',
          method: 'tools/call',
          id: messageId++,
          params: {
            name: 'evaluate_document',
            arguments: {
              content: docContent,
              rubric: {
                completeness: 0.3,
                accuracy: 0.3,
                clarity: 0.2,
                usability: 0.2
              },
              target_score: 8.0
            }
          }
        };
        
        ws.send(JSON.stringify(evalMessage));
        
        // ÈÄ≤ÊçóË°®Á§∫
        const progressInterval = setInterval(() => {
          const elapsed = Math.floor((Date.now() - startTime) / 1000);
          process.stdout.write(`\r‚è±Ô∏è  Ë©ï‰æ°ÂÆüË°å‰∏≠... ${elapsed}ÁßíÁµåÈÅé`);
        }, 1000);
        
        // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÂá¶ÁêÜ„Çí10ÂàÜ„Å´Âª∂Èï∑
        setTimeout(() => {
          clearInterval(progressInterval);
          console.error('\n‚ùå „Çø„Ç§„É†„Ç¢„Ç¶„Éà: 10ÂàÜ‰ª•ÂÜÖ„Å´ÂøúÁ≠î„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
          ws.close();
          reject(new Error('Evaluation timeout'));
        }, 600000); // 10ÂàÜ
      }
      
      // Ë©ï‰æ°ÁµêÊûúÂèó‰ø°
      if (message.result && message.result.content) {
        const elapsed = Math.floor((Date.now() - startTime) / 1000);
        console.log(`\n\n‚úÖ Ë©ï‰æ°ÂÆå‰∫ÜÔºÅÔºàÂá¶ÁêÜÊôÇÈñì: ${elapsed}ÁßíÔºâ`);
        
        const result = JSON.parse(message.result.content[0].text);
        
        console.log('\n' + '='.repeat(60));
        console.log('üìä Ë©ï‰æ°ÁµêÊûú„Çµ„Éû„É™„Éº');
        console.log('='.repeat(60));
        
        // Á∑èÂêà„Çπ„Ç≥„Ç¢
        console.log(`\nüéØ Á∑èÂêà„Çπ„Ç≥„Ç¢: ${result.score}/10 ${result.pass ? '‚úÖ ÂêàÊ†º' : '‚ùå ‰∏çÂêàÊ†º'}`);
        
        // Ë©≥Á¥∞„Çπ„Ç≥„Ç¢
        console.log('\nüìà Ë©≥Á¥∞„Çπ„Ç≥„Ç¢:');
        if (result.rubric_scores) {
          console.log(`  ‚Ä¢ ÂÆåÂÖ®ÊÄß (Completeness): ${result.rubric_scores.completeness}/10`);
          console.log(`  ‚Ä¢ Ê≠£Á¢∫ÊÄß (Accuracy): ${result.rubric_scores.accuracy}/10`);
          console.log(`  ‚Ä¢ ÊòéÁ¢∫ÊÄß (Clarity): ${result.rubric_scores.clarity}/10`);
          console.log(`  ‚Ä¢ ÂÆüÁî®ÊÄß (Usability): ${result.rubric_scores.usability}/10`);
        }
        
        // ÊîπÂñÑÊèêÊ°à
        if (result.suggestions && result.suggestions.length > 0) {
          console.log('\nüí° ÊîπÂñÑÊèêÊ°à:');
          result.suggestions.forEach((suggestion, index) => {
            console.log(`  ${index + 1}. ${suggestion}`);
          });
        }
        
        // „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâÊ°àÂÜÖ
        console.log('\n' + '='.repeat(60));
        console.log('üåê „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅßË©≥Á¥∞„ÇíÁ¢∫Ë™ç:');
        console.log('   http://localhost:3001');
        console.log('='.repeat(60));
        
        ws.close();
        resolve(result);
      }
      
      // „Ç®„É©„ÉºÂá¶ÁêÜ
      if (message.error) {
        console.error('\n‚ùå „Ç®„É©„Éº:', message.error);
        ws.close();
        reject(new Error(message.error.message));
      }
    });
    
    ws.on('error', (error) => {
      console.error('\n‚ùå WebSocket„Ç®„É©„Éº:', error);
      reject(error);
    });
    
    ws.on('close', () => {
      console.log('\nüì§ Ë©ï‰æ°„Çª„ÉÉ„Ç∑„Éß„É≥ÁµÇ‰∫Ü');
    });
  });
}

// ÂÆüË°å
console.log('üîÑ LoopSmith Document Evaluator');
console.log('================================\n');

evaluateArchitectureDoc()
  .then((result) => {
    console.log('\n‚ú® Ë©ï‰æ°„Éó„É≠„Çª„ÇπÊ≠£Â∏∏ÁµÇ‰∫Ü');
    
    // ÁµêÊûú„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
    const resultPath = path.join(__dirname, '../evaluation-results.json');
    fs.writeFileSync(resultPath, JSON.stringify(result, null, 2));
    console.log(`üìÅ ÁµêÊûú„Çí‰øùÂ≠ò: ${resultPath}`);
    
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Ë©ï‰æ°„Éó„É≠„Çª„Çπ„Ç®„É©„Éº:', error.message);
    process.exit(1);
  });